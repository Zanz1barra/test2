# Подключаем библиотеки, необходимые для создания программы
import sys
from PyQt4 import QtCore, QtGui

# Обязательное создание экземпляра основного приложения и передача параметров командной строки
app = QtGui.QApplication(sys.argv)

# Создаем объект окна, который наследует nрактически все классы, реализующие комnоненты графического интерфейса.
widget = QtGui.QWidget()

# Изменяем размеры окна с помощью метода resize()
widget.resize(300, 150)

# Зададим заголовок программы
widget.setWindowTitle('MyProgramm')

# Создадим надпись(можно использовать теги HTML)
label = QtGui.QLabel("<center>Hello!</center>")

# Создадим кнопку и присвоем ей надпись
btn = QtGui.QPushButton("CloseWindow")

# Создадим контейнер, в который помести надпись и кнопку
box = QtGui.QVBoxLayout()
box.addWidget(label)
box.addWidget(btn)

# Добавим контейнер в основное окно
widget.setLayout(box)

# Обработчик сигнала, генерируемый nри нажатии кноnки.
# Аргументы:
# btn - объект, генерируещий сигнал
# QtCore.SIGNAL("clicked()") - название сигнала
# QtGui.qApp - объект, nринимающий сигнал
# QtCore.SLOT("quit()") - метод объекта, который будет вызван nри вызове события
QtCore.QObject.connect(btn, QtCore.SIGNAL("clicked()"), QtGui.qApp, QtCore.SLOT("quit()"))
# Отобразим окно прогаммы с помощью метода show()
widget.show()

# Основной цикл обработки событий программы, получает и обрабатывает события окна системы, передает их виджетам.
# По окончании работы основного цикла, программа закончит работу. sys.exit() передает информацию ОС об оканчании работы приложения.
sys.exit(app.exec_())

# Для того, чтоб не появлялась отладочная консоль при запуске программы, расширение скрипта переименуйте в .pyw